#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# sender.py
#
# This file is part of ---
#
# Copyright (C) 2017
# Lorenzo Carbonell Cerezo <lorenzo.carbonell.cerezo@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from optparse import OptionParser
from pprint import pprint
import logging
import codecs
import os
import sys
import json
import subprocess
import shlex
try:
    from telegram import Bot, ParseMode
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Updater
    from telegram.ext import CommandHandler, CallbackQueryHandler
    from telegram.ext import MessageHandler, Filters
except Exception as e:
    sys.path.insert(1, '/usr/share/senderbot/')
    from telegram import Bot, ParseMode
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Updater
    from telegram.ext import CommandHandler, CallbackQueryHandler
    from telegram.ext import MessageHandler, Filters


APP = 'senderbot'
APPNAME = 'SenderBot'
APPCONF = APP + '.conf'
CONFIG_DIR = os.path.join(os.path.expanduser('~'), '.config')
CONFIG_APP_DIR = os.path.join(CONFIG_DIR, APP)
CONFIG_FILE = os.path.join(CONFIG_APP_DIR, APPCONF)
PARAMS = {'token': None,
          'channel_id': None}

if not os.path.exists(CONFIG_APP_DIR):
    os.makedirs(CONFIG_APP_DIR)


def run_command(command):
    command = shlex.split(command)
    result = subprocess.run(command,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    output = result.stdout.decode()
    error = result.stderr.decode()
    if len(output) > 0:
        return output
    if len(error) > 0:
        return 'Error: %s' % error
    return None


class Configuration(object):
    def __init__(self):
        self.params = PARAMS
        self.read()

    def get(self, key):
        try:
            return self.params[key]
        except KeyError as e:
            print(e)
            self.params[key] = PARAMS[key]
            return self.params[key]

    def set(self, key, value):
        self.params[key] = value

    def reset(self):
        if os.path.exists(CONFIG_FILE):
            os.remove(CONFIG_FILE)
        self.params = PARAMS
        self.save()

    def set_defaults(self):
        self.params = PARAMS
        self.save()

    def print_config(self):
        pprint(self.params)

    def read(self):
        try:
            f = codecs.open(CONFIG_FILE, 'r', 'utf-8')
        except IOError as e:
            print(e)
            self.save()
            f = codecs.open(CONFIG_FILE, 'r', 'utf-8')
        try:
            self.params = json.loads(f.read())
        except ValueError as e:
            print(e)
            self.save()
        f.close()

    def save(self):
        f = codecs.open(CONFIG_FILE, 'w', 'utf-8')
        f.write(json.dumps(self.params))
        f.close()


class SenderBot(Bot):
    def __init__(self, token=None, channel_id=None):
        if token is None or channel_id is None:
            configuration = Configuration()
            token = configuration.get('token')
            channel_id = configuration.get('channel_id')
        Bot.__init__(self, token)
        self.channel_id = channel_id

    def send_message(self, text):
        super(SenderBot, self).send_message(chat_id=self.channel_id,
                                            text=text,
                                            parse_mode=ParseMode.HTML)

    def send_image(self, file_image):
        if os.path.exists(file_image):
            super(SenderBot, self).sendPhoto(chat_id=self.channel_id,
                                             photo=open(file_image, 'rb'))

    def send_audio(self, file_audio):
        if os.path.exists(file_audio):
            extension = os.path.splitext(file_audio)[1][1:].strip().lower()
            if extension == 'ogg':
                super(SenderBot, self).sendVoice(chat_id=self.channel_id,
                                                 voice=open(file_audio, 'rb'))
            elif extension == 'mp3':
                super(SenderBot, self).sendAudio(chat_id=self.channel_id,
                                                 audio=open(file_audio, 'rb'))

    def send_document(self, file_document):
        if os.path.exists(file_document):
            super(SenderBot, self).sendDocument(chat_id=self.channel_id,
                                                document=open(file_document,
                                                              'rb'),
                                                timeout=999)

    def get_images(self):
        updates = super(SenderBot, self).get_updates()
        for index, update in enumerate(updates):
            if update.message.photo:
                file_id = update.message.photo[-1].file_id
                afile = self.get_file(file_id)
                afile.download()


def set_channel_id(channel_id):
    configuration = Configuration()
    configuration.set('channel_id', channel_id)
    configuration.save()


def set_token(token):
    configuration = Configuration()
    configuration.set('token', token)
    configuration.save()


def print_config():
    configuration = Configuration()
    configuration.print_config()


def get_images():
    cab = SenderBot()
    cab.get_images()


def send_message(message):
    cab = SenderBot()
    cab.send_message(message)


def send_image(image_file):
    cab = SenderBot()
    cab.send_image(image_file)


def send_audio(audio_file):
    cab = SenderBot()
    cab.send_audio(audio_file)


def send_document(document_file):
    cab = SenderBot()
    cab.send_document(document_file)


def only():
    configuration = Configuration()
    token = configuration.get('token')
    if token is not None and len(token) > 0:
        updater = Updater(token=token)
        dispatcher = updater.dispatcher

        def start(bot, update):
            bot.send_message(chat_id=update.message.chat_id,
                             text="¿Si?, mi amo!")

        def temp(bot, update):
            data = open('/sys/class/thermal/thermal_zone0/temp', 'r')
            temperatura = data.read()
            data.close()
            temperatura = temperatura[:-1]
            temperatura = str(float(temperatura) / 1000.0) + ' ºC'
            bot.send_message(chat_id=update.message.chat_id, text=temperatura)

        def samba(bot, update):
            salida = run_command('systemctl status smbd')
            if salida is not None:
                if salida.find('running') > -1:
                    bot.send_message(chat_id=update.message.chat_id,
                                     text="Samba está funcionando!")
                    return
                elif salida.find('dead') > -1:
                    bot.send_message(chat_id=update.message.chat_id,
                                     text="Samba está parado!")
                    return
            bot.send_message(chat_id=update.message.chat_id,
                             text="Algo no va bien!!! Samba está parado!")

        def info(bot, update):
            keyboard = [[InlineKeyboardButton("MariaDB", callback_data='1'),
                         InlineKeyboardButton("Apache", callback_data='2')],
                        [InlineKeyboardButton("OpenVPN", callback_data='3')]]

            reply_markup = InlineKeyboardMarkup(keyboard)

            update.message.reply_text('Selecciona un servicio:',
                                      reply_markup=reply_markup)

        def button(bot, update):
            query = update.callback_query
            print(query.data, type(query.data))
            if query.data == '1':
                salida = run_command('systemctl status mariadb')
                if salida is not None:
                    if salida.find('running') > -1:
                        bot.edit_message_text(
                            chat_id=query.message.chat_id,
                            message_id=query.message.message_id,
                            text="MariaDB está funcionando!")
                        return
                    elif salida.find('dead') > -1:
                        bot.send_message(chat_id=update.message.chat_id,
                                         text="MariaDB está parado!")
                        return
                bot.send_message(chat_id=update.message.chat_id,
                                 text="Algo no va bien!! MariaDB está parado!")
            elif query.data == '2':
                salida = run_command('systemctl status apache2')
                if salida is not None:
                    if salida.find('running') > -1:
                        bot.send_message(chat_id=update.message.chat_id,
                                         text="Apache está funcionando!")
                        return
                    elif salida.find('dead') > -1:
                        bot.send_message(chat_id=update.message.chat_id,
                                         text="Apache está parado!")
                        return
                bot.send_message(chat_id=update.message.chat_id,
                                 text="Algo no va bien!!! Apache está parado!")
            elif query.data == '3':
                salida = run_command('systemctl status openvpn')
                if salida is not None:
                    if salida.find('Active: active') > -1:
                        bot.send_message(chat_id=update.message.chat_id,
                                         text="El VPN está funcionando!")
                        return
                    elif salida.find('dead') > -1:
                        bot.send_message(chat_id=update.message.chat_id,
                                         text="El VPN está parado!")
                        return
                bot.send_message(chat_id=update.message.chat_id,
                                 text="Algo no va bien!!! El VPN está parado!")

        def mariadb(bot, update):
            salida = run_command('systemctl status mariadb')
            if salida is not None:
                if salida.find('running') > -1:
                    bot.send_message(chat_id=update.message.chat_id,
                                     text="MariaDB está funcionando!")
                    return
                elif salida.find('dead') > -1:
                    bot.send_message(chat_id=update.message.chat_id,
                                     text="MariaDB está parado!")
                    return
            bot.send_message(chat_id=update.message.chat_id,
                             text="Algo no va bien!!! MariaDB está parado!")

        def apache(bot, update):
            salida = run_command('systemctl status apache2')
            if salida is not None:
                if salida.find('running') > -1:
                    bot.send_message(chat_id=update.message.chat_id,
                                     text="Apache está funcionando!")
                    return
                elif salida.find('dead') > -1:
                    bot.send_message(chat_id=update.message.chat_id,
                                     text="Apache está parado!")
                    return
            bot.send_message(chat_id=update.message.chat_id,
                             text="Algo no va bien!!! Apache está parado!")

        def vpn(bot, update):
            salida = run_command('systemctl status openvpn')
            if salida is not None:
                if salida.find('Active: active') > -1:
                    bot.send_message(chat_id=update.message.chat_id,
                                     text="El VPN está funcionando!")
                    return
                elif salida.find('dead') > -1:
                    bot.send_message(chat_id=update.message.chat_id,
                                     text="El VPN está parado!")
                    return
            bot.send_message(chat_id=update.message.chat_id,
                             text="Algo no va bien!!! El VPN está parado!")

        def caps(bot, update, args):
            text_caps = ' '.join(args).upper()
            bot.send_message(chat_id=update.message.chat_id, text=text_caps)

        def echo(bot, update):
            bot.send_message(chat_id=update.message.chat_id,
                             text=update.message.text)

        def unknown(bot, update):
            bot.send_message(chat_id=update.message.chat_id,
                             text="Lo siento, no entiendo esa orden.")

        def error(bot, update, error):
            logging.warning('Update "%s" caused error "%s"' % (update, error))

        def stop(bot, update):
            bot.send_message(chat_id=update.message.chat_id,
                             text="Parando el bot")
            updater.stop()

        start_handler = CommandHandler('start', start)
        dispatcher.add_handler(start_handler)

        info_handler = CommandHandler('info', info)
        dispatcher.add_handler(info_handler)
        dispatcher.add_handler(CallbackQueryHandler(button))

        temp_handler = CommandHandler('temp', temp)
        dispatcher.add_handler(temp_handler)

        samba_handler = CommandHandler('samba', samba)
        dispatcher.add_handler(samba_handler)

        samba_mariadb = CommandHandler('mariadb', mariadb)
        dispatcher.add_handler(samba_mariadb)

        apache_handler = CommandHandler('apache', apache)
        dispatcher.add_handler(apache_handler)

        vpn_handler = CommandHandler('vpn', vpn)
        dispatcher.add_handler(vpn_handler)

        caps_handler = CommandHandler('caps', caps, pass_args=True)
        dispatcher.add_handler(caps_handler)

        stop_handler = CommandHandler('stop', stop)
        dispatcher.add_handler(stop_handler)

        echo_handler = MessageHandler(Filters.text, echo)
        dispatcher.add_handler(echo_handler)

        dispatcher.add_error_handler(error)

        unknown_handler = MessageHandler(Filters.command, unknown)
        dispatcher.add_handler(unknown_handler)

        # Start the Bot
        updater.start_polling()

        # Run the bot until you press Ctrl-C or the process receives SIGINT,
        # SIGTERM or SIGABRT. This should be used most of the time, since
        # start_polling() is non-blocking and will stop the bot gracefully.
        updater.idle()


if __name__ == '__main__':
    usage = "usage: %prog [options] arg"
    parser = OptionParser(usage=usage)
    parser.add_option('-a', '--audio_file', dest='audio_file',
                      help='send an audio to the channel')
    parser.add_option('-c', '--set-channel-id', dest='channel_id',
                      metavar='CHANNEL_ID',
                      help='set channel id where bot will send messages')
    parser.add_option('-d', '--document_file', dest='document_file',
                      help='send a document to the channel')
    parser.add_option('-g', '--get-images',
                      action='store_true', dest='get_images', default=False,
                      help='get all images from chat_id')
    parser.add_option('-i', '--image_file', dest='image_file',
                      help='send a image to the channel')
    parser.add_option('-m', '--message', dest='message',
                      help='send a message to the channel')
    parser.add_option('-o', '--work alone',
                      action='store_true', dest='only', default=False,
                      help='Allow bot work alone')
    parser.add_option('-p', '--print-config',
                      action='store_true', dest='print_config', default=False,
                      help='Print configuration')
    parser.add_option('-t', '--set-token', dest='token',
                      metavar='TOKEN',
                      help='set the TOKEN of the bot')

    (options, args) = parser.parse_args()
    # Send audio file
    if options.audio_file is not None:
        send_audio(options.audio_file)
    # Set channel id
    if options.channel_id is not None:
        set_channel_id(options.channel_id)
    # Send document file
    if options.document_file is not None:
        send_document(options.document_file)
    # Send message
    if options.message is not None:
        send_message(options.message)
    # Send image
    if options.image_file is not None:
        send_image(options.image_file)
    # Print
    if options.print_config is True:
        print_config()
    # Get Images
    if options.get_images is True:
        get_images()
    # Work Alone
    if options.only is True:
        only()
    # Set Token
    if options.token is not None:
        set_token(options.token)
